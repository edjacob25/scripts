#!/usr/bin/env python

from datetime import datetime
from typing import Dict
import requests
import json
from argparse import ArgumentParser
from rich.console import Console
from rich.prompt import IntPrompt
from rich.table import Table
from rich import print

console = Console()

base_url = "https://graphql.anilist.co"


def get_userid(username: str) -> int:
    query = """
    query ($name: String) {
      User (name: $name) {
        id
      }
    }
    """
    # Ge user id
    variables = {"name": username}
    r = requests.post(base_url, json={"query": query, "variables": variables})
    res = r.json()
    print(res)
    return int(res["data"]["User"]["id"])


def get_media_id(media_name: str) -> int:
    query = """
    query ($media_name: String) {
      Page(page: 0, perPage: 10){
        media (search: $media_name) {
          id,
          title {
            romaji
            english
          },
          type
        }
      } 
    }
    """
    variables = {"media_name": media_name}
    r = requests.post(base_url, json={"query": query, "variables": variables})
    res = r.json()["data"]["Page"]["media"]
    for i, option in enumerate(res):
        title = (
            option["title"]["english"]
            if option["title"]["english"]
            else option["title"]["romaji"]
        )
        style = "blue" if option["type"] == "MANGA" else "red"
        print(f"{i} - {title} - [{style}]{option['type']}[/{style}]")
    # print("Choose an option: ", end="")
    choosed = IntPrompt.ask("Choose an option")
    return int(res[choosed]["id"])


def get_data(user_id: int, page: int, media_id: int, save: bool = False):
    query = """
    query ($userId: Int, $page: Int, $mediaId: Int) {
      Page(page: $page, perPage: 50) {
        activities(userId: $userId, type: MANGA_LIST, mediaId: $mediaId, sort: ID) {
          ... on ListActivity {
            progress
            media {
              title {
                romaji
              }
            }
            createdAt
          }
        }
      }
    }
    """
    # Ge user id
    variables = {"userId": user_id, "page": page, "mediaId": media_id}
    print(variables)
    response = requests.post(base_url, json={"query": query, "variables": variables})
    result = response.json()["data"]["Page"]["activities"]
    print(response.status_code)
    for activity in result:
        activity["createdAtHuman"] = str(datetime.fromtimestamp(activity["createdAt"]))
    # print(json.dumps(result, indent=2))
    print_table(result)
    if save:
        with open(f"activity_{user_id}_{page}.json", "w") as f:
            json.dump(result, f)


def print_table(dict: dict):
    table = Table(header_style="bold green")
    table.add_column("Progress")
    table.add_column("Title")
    table.add_column("Date")
    table.row_styles = ["blue", "red"]

    for activity in dict:
        table.add_row(
            activity["progress"],
            activity["media"]["title"]["romaji"],
            activity["createdAtHuman"],
        )

    console.print(table)


def main():
    parser = ArgumentParser()

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-u", "--username")
    group.add_argument("-i", "--id")

    parser.add_argument("-s", "--save", action="store_true")
    parser.add_argument("-p", "--page", type=int, required=True)

    media_group = parser.add_mutually_exclusive_group(required=True)
    media_group.add_argument("-m", "--mediaId", type=int)
    media_group.add_argument("-n", "--nameMedia")

    args = parser.parse_args()

    if args.id:
        user_id = args.id
    else:
        user_id = get_userid(args.username)

    if args.mediaId:
        media_id = args.mediaId
    else:
        media_id = get_media_id(args.nameMedia)

    get_data(user_id, args.page, media_id, args.save)


if __name__ == "__main__":
    main()
