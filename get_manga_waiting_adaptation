#!/usr/bin/env python

import requests
import json
from argparse import ArgumentParser
from rich.console import Console
from rich.table import Table
from rich import print

console = Console()
base_url = "https://graphql.anilist.co"


def get_userid(username: str):
    query = """
    query ($name: String) {
      User (name: $name) {
        id
      }
    }
    """
    # Ge user id
    variables = {"name": username}
    r = requests.post(base_url, json={"query": query, "variables": variables})
    res = r.json()
    print(res)
    return res["data"]["User"]["id"]


def get_data(user_id: int, save: bool = False):
    query = """
    query ($userId: Int) {
      MediaListCollection (userId: $userId, type: MANGA, status_in: [CURRENT, COMPLETED, REPEATING]) {
        lists {
            entries{
                media {
                    title {
                        english
                        romaji
                    }
                    relations {
                        edges {
                            relationType
                            node {
                                title {
                                    english
                                    romaji
                                }
                                type
                                status
                                startDate {
                                    year
                                    month
                                    day
                                }
                            }
                        }
                    }
                }
            }
        }
      }
    }
    """
    # Ge user id
    variables = {"userId": user_id}
    r = requests.post(base_url, json={"query": query, "variables": variables})
    print(r.status_code)

    table = Table(header_style="bold green")
    table.add_column("Manga")
    table.add_column("Anime", justify="right")
    table.add_column("Start Date", justify="right")
    table.row_styles = ["blue", "red"]

    lists = r.json()["data"]["MediaListCollection"]["lists"]
    for lst in lists:
        for manga in lst["entries"]:
            manga_name = (
                manga["media"]["title"]["romaji"]
                if manga["media"]["title"]["english"] is None
                else manga["media"]["title"]["english"]
            )
            for adaptation in manga["media"]["relations"]["edges"]:
                if (
                    adaptation["relationType"] == "ADAPTATION"
                    and adaptation["node"]["type"] == "ANIME"
                    and adaptation["node"]["status"] == "NOT_YET_RELEASED"
                ):
                    anime_name = (
                        adaptation["node"]["title"]["romaji"]
                        if adaptation["node"]["title"]["english"] is None
                        else adaptation["node"]["title"]["english"]
                    )
                    date_dict = adaptation["node"]["startDate"]

                    expected_date = f"{date_dict['year']}" if date_dict["year"] else ""
                    expected_date += (
                        f"/{date_dict['month']}" if date_dict["month"] else ""
                    )
                    expected_date += f"/{date_dict['day']}" if date_dict["day"] else ""
                    table.add_row(manga_name, anime_name, expected_date)

    print(table)
    # if save:
    #     with open(f"list_{user_id}.json", "w") as f:
    #         json.dump(res, f)


def main():
    parser = ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-u", "--username")
    group.add_argument("-i", "--id")
    parser.add_argument("-s", "--save", action="store_true")

    args = parser.parse_args()

    if args.id:
        id = args.id
    else:
        id = get_userid(args.username)
    get_data(id, args.save)


if __name__ == "__main__":
    main()
